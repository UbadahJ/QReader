plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-kapt"
    id "kotlin-parcelize"

    id "dagger.hilt.android.plugin"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    id "androidx.navigation.safeargs.kotlin"

    id "com.diffplug.spotless" version "5.17.0"
}

apply plugin: "com.squareup.sqldelight"


android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "com.ubadahj.qidianundergroud"
        minSdkVersion 21
        targetSdkVersion 31

        versionCode getMasterCommitCount()
        versionName getAppVersion()

        def enableAnalytics = getBranchName() != "master"
        manifestPlaceholders = [enableAnalytics: enableAnalytics]
        buildConfigField("boolean", "ENABLE_ANALYTICS", "${enableAnalytics}")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        viewBinding true
    }

}

dependencies {

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2')

    implementation("androidx.core:core-ktx:1.7.0")
    implementation("androidx.fragment:fragment-ktx:1.4.0")
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation("androidx.recyclerview:recyclerview:1.2.1")
    implementation("androidx.appcompat:appcompat:1.4.1")
    implementation('androidx.constraintlayout:constraintlayout:2.1.3')
    implementation("androidx.legacy:legacy-support-v4:1.0.0")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.3")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.4.0")

    // For firebase analytics
    implementation(platform("com.google.firebase:firebase-bom:28.4.0"))
    implementation("com.google.firebase:firebase-analytics-ktx")
    implementation("com.google.firebase:firebase-crashlytics-ktx")

    // Required for new java.time.*
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.1.5")

    // Dependency Injection
    implementation('com.google.dagger:hilt-android:2.39.1')
    implementation("androidx.hilt:hilt-work:1.0.0")
    kapt('com.google.dagger:hilt-android-compiler:2.39.1')
    kapt("androidx.hilt:hilt-compiler:1.0.0")

    // Navigation Support
    implementation("androidx.navigation:navigation-fragment-ktx:2.3.5")
    implementation("androidx.navigation:navigation-ui-ktx:2.3.5")

    // For Json
    def moshiVersion = "1.12.0"
    implementation("com.squareup.moshi:moshi:$moshiVersion")
    implementation("com.squareup.moshi:moshi-kotlin:$moshiVersion")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion")

    // For web requests
    def okhttpVersion = "4.9.1"
    def retrofitVersion = "2.9.0"
    implementation("com.squareup.retrofit2:retrofit:$retrofitVersion")
    implementation("com.squareup.retrofit2:converter-moshi:$retrofitVersion")
    implementation("com.squareup.okhttp3:okhttp:$okhttpVersion")
    implementation("com.squareup.okhttp3:logging-interceptor:$okhttpVersion")

    // Lifecycle support
    def lifecycleVersion = "2.4.0"
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion")

    // Preferences
    def preference_version = "1.1.1"
    implementation("androidx.preference:preference-ktx:$preference_version")

    // Theming
    implementation("com.google.android.material:material:1.6.0-alpha02")

    // Custom tabs
    implementation("androidx.browser:browser:1.4.0")

    // For notification service
    def workVersion = '2.7.1'
    implementation("androidx.work:work-runtime-ktx:$workVersion")

    // For logging
    implementation("com.github.ajalt:timberkt:1.5.1")

    // Fast Scroller for recyclerview
    implementation('io.github.l4digital:fastscroll:2.0.1')

    // For for working with JSoup
    implementation('org.jsoup:jsoup:1.14.3')

    // Database support
    implementation('com.squareup.sqldelight:android-driver:1.5.2')
    implementation('com.squareup.sqldelight:coroutines-extensions-jvm:1.5.2')

    implementation("io.coil-kt:coil:1.3.2")

    implementation("com.fredporciuncula:flow-preferences:1.5.0")
}

kapt {
    correctErrorTypes = true
}

spotless {
    format("misc") {
        target("*.gradle", "*.md", ".gitignore")

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        googleJavaFormat("1.8").aosp()
    }
    kotlin {
        target("**/*.kt")
        ktlint("0.41.0").userData(
                disabled_rules: "no-wildcard-imports, no-blank-line-before-rbrace"
        )

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    kotlinGradle {
        target("**/*.kts")

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}

tasks.register("spotlessHook") {
    createSpotlessGitHook()
}

static String getAppVersion() {
    def version = "1.1b${getMasterCommitCount()}"
    if (getBranchName() != "master") {
        version += "+${"git rev-list --count HEAD ^master".execute().text.trim()}"
    }

    return "$version-${getBranchName()}"
}

static Integer getMasterCommitCount() {
    return "git rev-list --count master".execute().text.trim().toInteger()
}

static String getGitSha() { return "git rev-parse --short HEAD".execute().text.trim() }

static String getBranchName() { return "git rev-parse --abbrev-ref HEAD".execute().text.trim() }